"use strict";(self.webpackChunk_tokenstreet_react_native_extended_stylesheet_website=self.webpackChunk_tokenstreet_react_native_extended_stylesheet_website||[]).push([[672],{2093:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"features","title":"Features","description":"Global variables","source":"@site/docs/features.md","sourceDirName":".","slug":"/features","permalink":"/react-native-extended-stylesheet/docs/features","draft":false,"unlisted":false,"editUrl":"https://github.com/tokenstreet-tech/react-native-extended-stylesheet/tree/main/packages/website/docs/features.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Usage","permalink":"/react-native-extended-stylesheet/docs/usage"},"next":{"title":"@tokenstreet/react-native-extended-stylesheet","permalink":"/react-native-extended-stylesheet/docs/api/"}}');var l=t(1085),i=t(1184);const r={sidebar_position:3},a="Features",o={},c=[{value:"Global variables",id:"global-variables",level:2},{value:"Local variables",id:"local-variables",level:2},{value:"Theming",id:"theming",level:2},{value:"Media queries",id:"media-queries",level:2},{value:"Math operations",id:"math-operations",level:2},{value:"REM units",id:"rem-units",level:2},{value:"Percents",id:"percents",level:2},{value:"Scaling",id:"scaling",level:2},{value:"Underscored styles",id:"underscored-styles",level:2},{value:"Pseudo classes ()",id:"pseudo-classes-",level:2},{value:"Value as a function",id:"value-as-a-function",level:2},{value:"Caching",id:"caching",level:2},{value:"Outline for debug",id:"outline-for-debug",level:2},{value:"Hot module reload",id:"hot-module-reload",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"features",children:"Features"})}),"\n",(0,l.jsx)(n.h2,{id:"global-variables",children:"Global variables"}),"\n",(0,l.jsxs)(n.p,{children:["Global variables are passed to ",(0,l.jsx)(n.code,{children:"EStyleSheet.build()"})," and available in all stylesheets."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"// app entry: set global variables and calc styles\nEStyleSheet.build({\n    $textColor: '#0275d8',\n});\n\n// component: use global variables\nconst styles = EStyleSheet.create({\n    text: {\n        color: '$textColor',\n    },\n});\n\n// global variable as inline style or as props to components\n<View\n    style={{\n        backgroundColor: EStyleSheet.value('$textColor'),\n    }}\n>\n    ...\n</View>;\n"})}),"\n",(0,l.jsx)(n.h2,{id:"local-variables",children:"Local variables"}),"\n",(0,l.jsxs)(n.p,{children:["Local variables can be defined directly in sylesheet and have priority over global variables.\nTo define local variable just start it with ",(0,l.jsx)(n.code,{children:"$"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const styles = EStyleSheet.create({\n    $textColor: '#0275d8',\n    text: {\n        color: '$textColor',\n    },\n    icon: {\n        color: '$textColor',\n    },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Local variables are also available in result style: ",(0,l.jsx)(n.code,{children:"styles.$textColor"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"theming",children:"Theming"}),"\n",(0,l.jsx)(n.p,{children:"Changing app theme contains two steps:"}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"re-build app styles"}),"\n",(0,l.jsx)(n.li,{children:"re-render components tree with new styles"}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["To re-build app styles you can call ",(0,l.jsx)(n.code,{children:"EStyleSheet.build()"})," with new set of global variables:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"EStyleSheet.build({\n    $theme: 'light', // required variable for caching!\n    $bgColor: 'white',\n});\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["Please note that special variable ",(0,l.jsxs)(n.strong,{children:[(0,l.jsx)(n.code,{children:"$theme"})," is required"]})," for proper caching of calculated styles."]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Re-rendering whole component tree is currently a bit tricky in React.\nOne option is to wrap app into component and re-mount it on theme change:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"  toggleTheme() {\n    const theme = EStyleSheet.value('$theme') === 'light' ? darkTheme : lightTheme;\n    EStyleSheet.build(theme);\n    this.setState({render: false}, () => this.setState({render: true}));\n  }\n  render() {\n    return this.state.render ? <App/> : null;\n  }\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The caveat is that all components loss their state.\nIn the future it may be possible with ",(0,l.jsx)(n.code,{children:"forceDeepUpdate()"})," method (see ",(0,l.jsx)(n.a,{href:"https://github.com/facebook/react/issues/7759",children:"facebook/react#7759"}),").\nThe approach is open for discusison, feel free to share your ideas in ",(0,l.jsx)(n.a,{href:"https://github.com/vitalets/react-native-extended-stylesheet/issues/22",children:"#22"}),",\n",(0,l.jsx)(n.a,{href:"https://github.com/vitalets/react-native-extended-stylesheet/issues/47",children:"#47"}),"."]}),"\n",(0,l.jsxs)(n.p,{children:["You can check out full theming code in ",(0,l.jsx)(n.a,{href:"https://github.com/tokenstreet-tech/react-native-extended-stylesheet/tree/main/packages/example/src/screens/theming",children:"examples/theming"})," or in ",(0,l.jsx)(n.a,{href:"https://snack.expo.io/@vitalets/dynamic-themes-with-extended-stylesheets",children:"Expo snack"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"media-queries",children:"Media queries"}),"\n",(0,l.jsxs)(n.p,{children:["Media queries allows to have different styles for different screens, platform, direction and orientation.\nThey are supported as properties with ",(0,l.jsx)(n.code,{children:"@media"})," prefix (thanks for idea to ",(0,l.jsx)(n.a,{href:"https://github.com/grabbou",children:"@grabbou"}),",\n",(0,l.jsx)(n.a,{href:"https://github.com/vitalets/react-native-extended-stylesheet/issues/5",children:"#5"}),")."]}),"\n",(0,l.jsx)(n.p,{children:"Media queries can operate with the following values:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["media type: ",(0,l.jsx)(n.code,{children:"ios|android"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"width"}),", ",(0,l.jsx)(n.code,{children:"min-width"}),", ",(0,l.jsx)(n.code,{children:"max-width"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"height"}),", ",(0,l.jsx)(n.code,{children:"min-height"}),", ",(0,l.jsx)(n.code,{children:"max-height"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"orientation"})," (",(0,l.jsx)(n.code,{children:"landscape|portrait"}),")"]}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"aspect-ratio"})}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.code,{children:"direction"})," (",(0,l.jsx)(n.code,{children:"ltr|rtl"}),")"]}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"You can use media queries on:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"global level"}),"\n",(0,l.jsx)(n.li,{children:"sheet level"}),"\n",(0,l.jsx)(n.li,{children:"style level"}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"Examples:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"// global level\nEStyleSheet.build({\n    '@media ios': {\n        $fontSize: 12,\n    },\n    '@media android': {\n        $fontSize: 16,\n    },\n});\n\n// sheet level\nconst styles = EStyleSheet.create({\n    column: {\n        width: '80%',\n    },\n    '@media (min-width: 350) and (max-width: 500)': {\n        column: {\n            width: '90%',\n        },\n    },\n});\n\n// style level\nconst styles = EStyleSheet.create({\n    header: {\n        '@media ios': {\n            color: 'green',\n        },\n        '@media android': {\n            color: 'blue',\n        },\n    },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You can check out full example code in ",(0,l.jsx)(n.a,{href:"https://github.com/tokenstreet-tech/react-native-extended-stylesheet/blob/main/packages/example/src/screens/MediaQueriesScreen.tsx",children:"examples/media-queries"})," or in ",(0,l.jsx)(n.a,{href:"https://snack.expo.io/@gbhasha/media-queries-using-extended-stylesheets",children:"Expo snack"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"math-operations",children:"Math operations"}),"\n",(0,l.jsxs)(n.p,{children:["Any value can contain ",(0,l.jsx)(n.strong,{children:"one"})," of following math operations: ",(0,l.jsx)(n.code,{children:"*"}),", ",(0,l.jsx)(n.code,{children:"/"}),", ",(0,l.jsx)(n.code,{children:"+"}),", ",(0,l.jsx)(n.code,{children:"-"}),". Operands can be numbers, variables and percents.\nFor example, to render circle you may create style:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const styles = EStyleSheet.create({\n    $size: 20,\n    circle: {\n        width: '$size',\n        height: '$size',\n        borderRadius: '0.5 * $size',\n    },\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"rem-units",children:"REM units"}),"\n",(0,l.jsxs)(n.p,{children:["Similar to ",(0,l.jsx)(n.a,{href:"http://snook.ca/archives/html_and_css/font-size-with-rem",children:"CSS3 rem unit"})," it allows to define any integer value as relative to the root element. In our case root value is special ",(0,l.jsx)(n.code,{children:"rem"})," global variable that can be set in ",(0,l.jsx)(n.code,{children:"EStyleSheet.build()"}),". It makes easy to scale app depending on screen size and other conditions. Default rem is ",(0,l.jsx)(n.code,{children:"16"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"// component\nconst styles = EStyleSheet.create({\n    text: {\n        fontSize: '1.5rem',\n        marginHorizontal: '2rem',\n    },\n});\n// app entry\nlet { height, width } = Dimensions.get('window');\nEStyleSheet.build({\n    $rem: width > 340 ? 18 : 16,\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["You can check out full example code in ",(0,l.jsx)(n.a,{href:"https://github.com/tokenstreet-tech/react-native-extended-stylesheet/blob/main/packages/example/src/screens/RemScreen.tsx",children:"examples/rem"})," or in ",(0,l.jsx)(n.a,{href:"https://snack.expo.io/@gbhasha/using-rem-units-with-extended-stylesheet",children:"Expo snack"}),"."]}),"\n",(0,l.jsx)(n.h2,{id:"percents",children:"Percents"}),"\n",(0,l.jsxs)(n.p,{children:["Percent values are supported natively since React Native 0.43.\nEStyleSheet passes them through to original StyleSheet except cases, when you use calculations with percents,\ne.g. ",(0,l.jsx)(n.code,{children:'"100% - 20"'}),". Percents are calculated relative to ",(0,l.jsx)(n.strong,{children:"screen width/height"})," on application launch."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const styles = EStyleSheet.create({\n    column: {\n        width: '100% - 20',\n    },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.strong,{children:"Percents in nested components"}),"\nIf you need sub-component with percent operations relative to parent component - you can achieve that with variables.\nFor example, to render 2 sub-columns with 30%/70% width of parent column:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"render() {\n  return (\n    <View style={styles.column}>\n      <View style={styles.subColumnLeft}></View>\n      <View style={styles.subColumnRight}></View>\n    </View>\n  );\n}\n\n...\n\nconst styles = EStyleSheet.create({\n  $columnWidth: '80%',\n  column: {\n    width: '$columnWidth',\n    flexDirection: 'row'\n  },\n  subColumnLeft: {\n    width: '0.3 * $columnWidth'\n  },\n  subColumnRight: {\n    width: '0.7 * $columnWidth'\n  }\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"scaling",children:"Scaling"}),"\n",(0,l.jsxs)(n.p,{children:["You can apply scale to components by setting special ",(0,l.jsx)(n.code,{children:"$scale"})," variable."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const styles = EStyleSheet.create({\n    $scale: 1.5,\n    button: {\n        width: 100,\n        height: 20,\n        marginLeft: 10,\n    },\n});\n"})}),"\n",(0,l.jsx)(n.p,{children:"This helps to create reusable components that could be scaled depending on prop:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"class Button extends React.Component {\n    static propTypes = {\n        scale: React.PropTypes.number,\n    };\n    render() {\n        let style = getStyle(this.props.scale);\n        return <View style={style.button}></View>;\n    }\n}\n\nlet getStyle = function (scale = 1) {\n    return EStyleSheet.create({\n        $scale: scale,\n        button: {\n            width: 100,\n            height: 20,\n            marginLeft: 10,\n        },\n    });\n};\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To cache calculated styles please have a look on ",(0,l.jsx)(n.a,{href:"#caching",children:"caching"})," section."]}),"\n",(0,l.jsx)(n.h2,{id:"underscored-styles",children:"Underscored styles"}),"\n",(0,l.jsxs)(n.p,{children:["Original react-native stylesheets are calculated to integer numbers and original values are unavailable.\nBut sometimes they are needed. Let's take an example:\nYou want to render text and icon with the same size and color.\nYou can take this ",(0,l.jsx)(n.a,{href:"https://github.com/oblador/react-native-vector-icons",children:"awesome icon library"}),"\nand see that ",(0,l.jsx)(n.code,{children:"<Icon>"})," component has ",(0,l.jsx)(n.code,{children:"size"})," and ",(0,l.jsx)(n.code,{children:"color"})," props.\nIt would be convenient to define style for text and keep icon's size/color in sync."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const styles = EStyleSheet.create({\n    text: {\n        fontSize: '1rem',\n        color: 'gray',\n    },\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["In runtime ",(0,l.jsx)(n.code,{children:"styles"})," created with original react's ",(0,l.jsx)(n.code,{children:"StyleSheet"})," will look like:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"styles = {\n    text: 0,\n};\n"})}),"\n",(0,l.jsxs)(n.p,{children:["But extended stylesheet saves calculated values under ",(0,l.jsx)(n.code,{children:"_text"})," property:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"styles = {\n    text: 0,\n    _text: {\n        fontSize: 16,\n        color: 'gray',\n    },\n};\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To render icon we just take styles from ",(0,l.jsx)(n.code,{children:"_text"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:'return (\n    <View>\n        <Icon name="rocket" size={styles._text.fontSize} color={styles._text.color} />\n        <Text style={styles.text}>Hello</Text>\n    </View>\n);\n'})}),"\n",(0,l.jsxs)(n.h2,{id:"pseudo-classes-",children:["Pseudo classes (",":nth-child",")"]}),"\n",(0,l.jsxs)(n.p,{children:["Extended stylesheet supports 4 pseudo classes: ",(0,l.jsx)(n.code,{children:":first-child"}),", ",(0,l.jsx)(n.code,{children:":nth-child-even"}),", ",(0,l.jsx)(n.code,{children:":nth-child-odd"}),", ",(0,l.jsx)(n.code,{children:":last-child"}),". As well as in traditional CSS it allows to apply special styling for first/last items or render stripped rows.\nTo get style for appropriate index you should use ",(0,l.jsx)(n.code,{children:"EStyleSheet.child()"})," method.\nIt's signature: ",(0,l.jsx)(n.code,{children:"EStyleSheet.child(stylesObj, styleName, index, count)"}),"."]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const styles = EStyleSheet.create({\n  row: {\n    fontSize: '1.5rem',\n    borderTopWidth: 1\n  },\n  'row:nth-child-even': {\n    backgroundColor: 'gray' // make stripped\n  },\n  'row:last-child': {\n    borderBottomWidth: 1 // render bottom edge for last row\n  }\n});\n...\nrender() {\n  return (\n    <View>\n      {items.map((item, index) => {\n        return (\n          <View key={index} style={EStyleSheet.child(styles, 'row', index, items.length)}></View>\n        );\n      })}\n    </View>\n  );\n}\n"})}),"\n",(0,l.jsx)(n.h2,{id:"value-as-a-function",children:"Value as a function"}),"\n",(0,l.jsxs)(n.p,{children:["For the deepest customization you can specify any value as a function that will be executed on EStyleSheet build.\nFor example, you may ",(0,l.jsx)(n.em,{children:"darken"})," or ",(0,l.jsx)(n.em,{children:"lighten"})," color of variable via ",(0,l.jsx)(n.a,{href:"https://www.npmjs.com/package/color",children:"npm color package"}),":"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"import Color from 'color';\nimport EStyleSheet from '@tokenstreet/react-native-extended-stylesheet';\n\nconst styles = EStyleSheet.create({\n  button: {\n    backgroundColor: () => Color('green').darken(0.1).hexString() // <-- value as a function\n  }\n});\n\nrender() {\n  return (\n    <TouchableHighlight style={styles.button}>\n      ...\n    </TouchableHighlight>\n  );\n}\n"})}),"\n",(0,l.jsxs)(n.p,{children:["The common pattern is to use ",(0,l.jsx)(n.a,{href:"#value",children:"EStyleSheet.value()"})," inside the function to get access to global variables:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"EStyleSheet.build({\n    $prmaryColor: 'green',\n});\n\nconst styles = EStyleSheet.create({\n    button: {\n        backgroundColor: () => Color(EStyleSheet.value('$prmaryColor')).darken(0.1).hexString(),\n    },\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"caching",children:"Caching"}),"\n",(0,l.jsxs)(n.p,{children:["If you use dynamic styles depending on runtime prop or you are making reusable component with dynamic styling\nyou may need stylesheet creation in every ",(0,l.jsx)(n.code,{children:"render()"})," call. Let's take example from ",(0,l.jsx)(n.a,{href:"#scaling",children:"scaling"})," section:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"class Button extends React.Component {\n    static propTypes = {\n        scale: React.PropTypes.number,\n    };\n    render() {\n        let style = getStyle(this.props.scale);\n        return <View style={style.button}></View>;\n    }\n}\n\nlet getStyle = function (scale = 1) {\n    return EStyleSheet.create({\n        $scale: scale,\n        button: {\n            width: 100,\n            height: 20,\n            marginLeft: 10,\n        },\n    });\n};\n"})}),"\n",(0,l.jsxs)(n.p,{children:["To avoid creating styles on every render you can use ",(0,l.jsx)(n.a,{href:"https://www.npmjs.com/package/lodash.memoize",children:"lodash.memoize"}),":\nstore result for particular parameters and returns it from cache when called with the same parameters.\nUpdated example:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"import memoize from 'lodash.memoize';\n\nlet getStyle = memoize(function (scale = 1) {\n    return EStyleSheet.create({\n        $scale: scale,\n        button: {\n            width: 100,\n            height: 20,\n            marginLeft: 10,\n        },\n    });\n});\n"})}),"\n",(0,l.jsxs)(n.p,{children:["Now if you call ",(0,l.jsx)(n.code,{children:"getStyle(1.5)"})," 3 times actually style will be created on the first call\nand two other calls will get it from cache."]}),"\n",(0,l.jsx)(n.h2,{id:"outline-for-debug",children:"Outline for debug"}),"\n",(0,l.jsxs)(n.p,{children:["It is possible to outline all components that are using EStyleSheet. For that set global ",(0,l.jsx)(n.code,{children:"$outline"})," variable:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"EStyleSheet.build({ $outline: 1 });\n"})}),"\n",(0,l.jsxs)(n.blockquote,{children:["\n",(0,l.jsxs)(n.p,{children:["Note that components without styles will not be outlined,\nbecause RN ",(0,l.jsx)(n.a,{href:"https://github.com/facebook/react-native/issues/1768",children:"does not support"})," default component styling yet."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["To outline particular component set local ",(0,l.jsx)(n.code,{children:"$outline"})," variable:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-jsx",children:"const styles = EStyleSheet.create({\n  $outline: 1,\n  column: {\n    width: '80%',\n    flexDirection: 'row'\n  },\n  ...\n});\n"})}),"\n",(0,l.jsx)(n.h2,{id:"hot-module-reload",children:"Hot module reload"}),"\n",(0,l.jsxs)(n.p,{children:[(0,l.jsx)(n.a,{href:"https://facebook.github.io/react-native/blog/2016/03/24/introducing-hot-reloading.html",children:"Hot module reload (HMR)"}),"\nallows you to change code and see live updates without loosing app state. It is very handy for tuning styles.\nEStyleSheet supports HMR with the following options:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsx)(n.p,{children:"When you change style of component - the component is updated by HMR automatically without any effort from your side."}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:["\n",(0,l.jsxs)(n.p,{children:["When you change global variable or theme - you should use ",(0,l.jsx)(n.a,{href:"https://facebook.github.io/react-native/releases/next/#hmr-api",children:"HMR API"}),"\nto force style re-calculation:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-js",children:"// app.js\nEStyleSheet.build({\n$fontColor: 'black'\n});\n    ...\n\n    module.hot.accept(() => {\n      EStyleSheet.clearCache();\n      EStyleSheet.build(); // force style re-calculation\n    });\n    ```\nSee full example of HMR [here](examples/hmr).\n\n"})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},1184:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(4041);const l={},i=s.createContext(l);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);