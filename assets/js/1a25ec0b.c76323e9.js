"use strict";(self.webpackChunk_tokenstreet_react_native_extended_stylesheet_website=self.webpackChunk_tokenstreet_react_native_extended_stylesheet_website||[]).push([[19],{876:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(2784);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),m=l,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},1893:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7896),l=(n(2784),n(876));const r={sidebar_position:4},o="Features",i={unversionedId:"features",id:"features",title:"Features",description:"Global variables",source:"@site/docs/features.md",sourceDirName:".",slug:"/features",permalink:"/react-native-extended-stylesheet/docs/features",draft:!1,editUrl:"https://github.com/tokenstreet-tech/react-native-extended-stylesheet/tree/main/packages/website/docs/features.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Usage",permalink:"/react-native-extended-stylesheet/docs/usage"},next:{title:"EStyleSheet API",permalink:"/react-native-extended-stylesheet/docs/api"}},s={},p=[{value:"Global variables",id:"global-variables",level:2},{value:"Local variables",id:"local-variables",level:2},{value:"Theming",id:"theming",level:2},{value:"Media queries",id:"media-queries",level:2},{value:"Math operations",id:"math-operations",level:2},{value:"REM units",id:"rem-units",level:2},{value:"Percents",id:"percents",level:2},{value:"Scaling",id:"scaling",level:2},{value:"Underscored styles",id:"underscored-styles",level:2},{value:"Pseudo classes (:nth-child)",id:"pseudo-classes-nth-child",level:2},{value:"Value as a function",id:"value-as-a-function",level:2},{value:"Caching",id:"caching",level:2},{value:"Outline for debug",id:"outline-for-debug",level:2},{value:"Hot module reload",id:"hot-module-reload",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"features"},"Features"),(0,l.kt)("h2",{id:"global-variables"},"Global variables"),(0,l.kt)("p",null,"Global variables are passed to ",(0,l.kt)("inlineCode",{parentName:"p"},"EStyleSheet.build()")," and available in all stylesheets."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// app entry: set global variables and calc styles\nEStyleSheet.build({\n    $textColor: '#0275d8',\n});\n\n// component: use global variables\nconst styles = EStyleSheet.create({\n    text: {\n        color: '$textColor',\n    },\n});\n\n// global variable as inline style or as props to components\n<View\n    style={{\n        backgroundColor: EStyleSheet.value('$textColor'),\n    }}\n>\n    ...\n</View>;\n")),(0,l.kt)("h2",{id:"local-variables"},"Local variables"),(0,l.kt)("p",null,"Local variables can be defined directly in sylesheet and have priority over global variables.\nTo define local variable just start it with ",(0,l.kt)("inlineCode",{parentName:"p"},"$"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const styles = EStyleSheet.create({\n    $textColor: '#0275d8',\n    text: {\n        color: '$textColor',\n    },\n    icon: {\n        color: '$textColor',\n    },\n});\n")),(0,l.kt)("p",null,"Local variables are also available in result style: ",(0,l.kt)("inlineCode",{parentName:"p"},"styles.$textColor"),"."),(0,l.kt)("h2",{id:"theming"},"Theming"),(0,l.kt)("p",null,"Changing app theme contains two steps:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"re-build app styles"),(0,l.kt)("li",{parentName:"ol"},"re-render components tree with new styles")),(0,l.kt)("p",null,"To re-build app styles you can call ",(0,l.kt)("inlineCode",{parentName:"p"},"EStyleSheet.build()")," with new set of global variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"EStyleSheet.build({\n    $theme: 'light', // required variable for caching!\n    $bgColor: 'white',\n});\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Please note that special variable ",(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("inlineCode",{parentName:"strong"},"$theme")," is required")," for proper caching of calculated styles.")),(0,l.kt)("p",null,"Re-rendering whole component tree is currently a bit tricky in React.\nOne option is to wrap app into component and re-mount it on theme change:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"  toggleTheme() {\n    const theme = EStyleSheet.value('$theme') === 'light' ? darkTheme : lightTheme;\n    EStyleSheet.build(theme);\n    this.setState({render: false}, () => this.setState({render: true}));\n  }\n  render() {\n    return this.state.render ? <App/> : null;\n  }\n")),(0,l.kt)("p",null,"The caveat is that all components loss their state.\nIn the future it may be possible with ",(0,l.kt)("inlineCode",{parentName:"p"},"forceDeepUpdate()")," method (see ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/facebook/react/issues/7759"},"facebook/react#7759"),").\nThe approach is open for discusison, feel free to share your ideas in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/vitalets/react-native-extended-stylesheet/issues/22"},"#22"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/vitalets/react-native-extended-stylesheet/issues/47"},"#47"),"."),(0,l.kt)("p",null,"You can check out full theming code in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tokenstreet-tech/react-native-extended-stylesheet/tree/main/packages/example/src/screens/theming"},"examples/theming")," or in ",(0,l.kt)("a",{parentName:"p",href:"https://snack.expo.io/@vitalets/dynamic-themes-with-extended-stylesheets"},"Expo snack"),"."),(0,l.kt)("h2",{id:"media-queries"},"Media queries"),(0,l.kt)("p",null,"Media queries allows to have different styles for different screens, platform, direction and orientation.\nThey are supported as properties with ",(0,l.kt)("inlineCode",{parentName:"p"},"@media")," prefix (thanks for idea to ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/grabbou"},"@grabbou"),",\n",(0,l.kt)("a",{parentName:"p",href:"https://github.com/vitalets/react-native-extended-stylesheet/issues/5"},"#5"),")."),(0,l.kt)("p",null,"Media queries can operate with the following values:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"media type: ",(0,l.kt)("inlineCode",{parentName:"li"},"ios|android")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"width"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"min-width"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"max-width")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"height"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"min-height"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"max-height")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"orientation")," (",(0,l.kt)("inlineCode",{parentName:"li"},"landscape|portrait"),")"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"aspect-ratio")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"direction")," (",(0,l.kt)("inlineCode",{parentName:"li"},"ltr|rtl"),")")),(0,l.kt)("p",null,"You can use media queries on:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"global level"),(0,l.kt)("li",{parentName:"ul"},"sheet level"),(0,l.kt)("li",{parentName:"ul"},"style level")),(0,l.kt)("p",null,"Examples:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// global level\nEStyleSheet.build({\n    '@media ios': {\n        $fontSize: 12,\n    },\n    '@media android': {\n        $fontSize: 16,\n    },\n});\n\n// sheet level\nconst styles = EStyleSheet.create({\n    column: {\n        width: '80%',\n    },\n    '@media (min-width: 350) and (max-width: 500)': {\n        column: {\n            width: '90%',\n        },\n    },\n});\n\n// style level\nconst styles = EStyleSheet.create({\n    header: {\n        '@media ios': {\n            color: 'green',\n        },\n        '@media android': {\n            color: 'blue',\n        },\n    },\n});\n")),(0,l.kt)("p",null,"You can check out full example code in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tokenstreet-tech/react-native-extended-stylesheet/blob/main/packages/example/src/screens/MediaQueriesScreen.tsx"},"examples/media-queries")," or in ",(0,l.kt)("a",{parentName:"p",href:"https://snack.expo.io/@gbhasha/media-queries-using-extended-stylesheets"},"Expo snack"),"."),(0,l.kt)("h2",{id:"math-operations"},"Math operations"),(0,l.kt)("p",null,"Any value can contain ",(0,l.kt)("strong",{parentName:"p"},"one")," of following math operations: ",(0,l.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"/"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"-"),". Operands can be numbers, variables and percents.\nFor example, to render circle you may create style:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const styles = EStyleSheet.create({\n    $size: 20,\n    circle: {\n        width: '$size',\n        height: '$size',\n        borderRadius: '0.5 * $size',\n    },\n});\n")),(0,l.kt)("h2",{id:"rem-units"},"REM units"),(0,l.kt)("p",null,"Similar to ",(0,l.kt)("a",{parentName:"p",href:"http://snook.ca/archives/html_and_css/font-size-with-rem"},"CSS3 rem unit")," it allows to define any integer value as relative to the root element. In our case root value is special ",(0,l.kt)("inlineCode",{parentName:"p"},"rem")," global variable that can be set in ",(0,l.kt)("inlineCode",{parentName:"p"},"EStyleSheet.build()"),". It makes easy to scale app depending on screen size and other conditions. Default rem is ",(0,l.kt)("inlineCode",{parentName:"p"},"16"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"// component\nconst styles = EStyleSheet.create({\n    text: {\n        fontSize: '1.5rem',\n        marginHorizontal: '2rem',\n    },\n});\n// app entry\nlet { height, width } = Dimensions.get('window');\nEStyleSheet.build({\n    $rem: width > 340 ? 18 : 16,\n});\n")),(0,l.kt)("p",null,"You can check out full example code in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/tokenstreet-tech/react-native-extended-stylesheet/blob/main/packages/example/src/screens/RemScreen.tsx"},"examples/rem")," or in ",(0,l.kt)("a",{parentName:"p",href:"https://snack.expo.io/@gbhasha/using-rem-units-with-extended-stylesheet"},"Expo snack"),"."),(0,l.kt)("h2",{id:"percents"},"Percents"),(0,l.kt)("p",null,"Percent values are supported natively since React Native 0.43.\nEStyleSheet passes them through to original StyleSheet except cases, when you use calculations with percents,\ne.g. ",(0,l.kt)("inlineCode",{parentName:"p"},'"100% - 20"'),". Percents are calculated relative to ",(0,l.kt)("strong",{parentName:"p"},"screen width/height")," on application launch."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const styles = EStyleSheet.create({\n    column: {\n        width: '100% - 20',\n    },\n});\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Percents in nested components"),"\nIf you need sub-component with percent operations relative to parent component - you can achieve that with variables.\nFor example, to render 2 sub-columns with 30%/70% width of parent column:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"render() {\n  return (\n    <View style={styles.column}>\n      <View style={styles.subColumnLeft}></View>\n      <View style={styles.subColumnRight}></View>\n    </View>\n  );\n}\n\n...\n\nconst styles = EStyleSheet.create({\n  $columnWidth: '80%',\n  column: {\n    width: '$columnWidth',\n    flexDirection: 'row'\n  },\n  subColumnLeft: {\n    width: '0.3 * $columnWidth'\n  },\n  subColumnRight: {\n    width: '0.7 * $columnWidth'\n  }\n});\n")),(0,l.kt)("h2",{id:"scaling"},"Scaling"),(0,l.kt)("p",null,"You can apply scale to components by setting special ",(0,l.kt)("inlineCode",{parentName:"p"},"$scale")," variable."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const styles = EStyleSheet.create({\n    $scale: 1.5,\n    button: {\n        width: 100,\n        height: 20,\n        marginLeft: 10,\n    },\n});\n")),(0,l.kt)("p",null,"This helps to create reusable components that could be scaled depending on prop:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"class Button extends React.Component {\n    static propTypes = {\n        scale: React.PropTypes.number,\n    };\n    render() {\n        let style = getStyle(this.props.scale);\n        return <View style={style.button}></View>;\n    }\n}\n\nlet getStyle = function (scale = 1) {\n    return EStyleSheet.create({\n        $scale: scale,\n        button: {\n            width: 100,\n            height: 20,\n            marginLeft: 10,\n        },\n    });\n};\n")),(0,l.kt)("p",null,"To cache calculated styles please have a look on ",(0,l.kt)("a",{parentName:"p",href:"#caching"},"caching")," section."),(0,l.kt)("h2",{id:"underscored-styles"},"Underscored styles"),(0,l.kt)("p",null,"Original react-native stylesheets are calculated to integer numbers and original values are unavailable.\nBut sometimes they are needed. Let's take an example:\nYou want to render text and icon with the same size and color.\nYou can take this ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/oblador/react-native-vector-icons"},"awesome icon library"),"\nand see that ",(0,l.kt)("inlineCode",{parentName:"p"},"<Icon>")," component has ",(0,l.kt)("inlineCode",{parentName:"p"},"size")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"color")," props.\nIt would be convenient to define style for text and keep icon's size/color in sync."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const styles = EStyleSheet.create({\n    text: {\n        fontSize: '1rem',\n        color: 'gray',\n    },\n});\n")),(0,l.kt)("p",null,"In runtime ",(0,l.kt)("inlineCode",{parentName:"p"},"styles")," created with original react's ",(0,l.kt)("inlineCode",{parentName:"p"},"StyleSheet")," will look like:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"styles = {\n    text: 0,\n};\n")),(0,l.kt)("p",null,"But extended stylesheet saves calculated values under ",(0,l.kt)("inlineCode",{parentName:"p"},"_text")," property:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"styles = {\n    text: 0,\n    _text: {\n        fontSize: 16,\n        color: 'gray',\n    },\n};\n")),(0,l.kt)("p",null,"To render icon we just take styles from ",(0,l.kt)("inlineCode",{parentName:"p"},"_text"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},'return (\n    <View>\n        <Icon name="rocket" size={styles._text.fontSize} color={styles._text.color} />\n        <Text style={styles.text}>Hello</Text>\n    </View>\n);\n')),(0,l.kt)("h2",{id:"pseudo-classes-nth-child"},"Pseudo classes (:nth-child)"),(0,l.kt)("p",null,"Extended stylesheet supports 4 pseudo classes: ",(0,l.kt)("inlineCode",{parentName:"p"},":first-child"),", ",(0,l.kt)("inlineCode",{parentName:"p"},":nth-child-even"),", ",(0,l.kt)("inlineCode",{parentName:"p"},":nth-child-odd"),", ",(0,l.kt)("inlineCode",{parentName:"p"},":last-child"),". As well as in traditional CSS it allows to apply special styling for first/last items or render stripped rows.\nTo get style for appropriate index you should use ",(0,l.kt)("inlineCode",{parentName:"p"},"EStyleSheet.child()")," method.\nIt's signature: ",(0,l.kt)("inlineCode",{parentName:"p"},"EStyleSheet.child(stylesObj, styleName, index, count)"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const styles = EStyleSheet.create({\n  row: {\n    fontSize: '1.5rem',\n    borderTopWidth: 1\n  },\n  'row:nth-child-even': {\n    backgroundColor: 'gray' // make stripped\n  },\n  'row:last-child': {\n    borderBottomWidth: 1 // render bottom edge for last row\n  }\n});\n...\nrender() {\n  return (\n    <View>\n      {items.map((item, index) => {\n        return (\n          <View key={index} style={EStyleSheet.child(styles, 'row', index, items.length)}></View>\n        );\n      })}\n    </View>\n  );\n}\n")),(0,l.kt)("h2",{id:"value-as-a-function"},"Value as a function"),(0,l.kt)("p",null,"For the deepest customization you can specify any value as a function that will be executed on EStyleSheet build.\nFor example, you may ",(0,l.kt)("em",{parentName:"p"},"darken")," or ",(0,l.kt)("em",{parentName:"p"},"lighten")," color of variable via ",(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/color"},"npm color package"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import Color from 'color';\nimport EStyleSheet from '@tokenstreet/react-native-extended-stylesheet';\n\nconst styles = EStyleSheet.create({\n  button: {\n    backgroundColor: () => Color('green').darken(0.1).hexString() // <-- value as a function\n  }\n});\n\nrender() {\n  return (\n    <TouchableHighlight style={styles.button}>\n      ...\n    </TouchableHighlight>\n  );\n}\n")),(0,l.kt)("p",null,"The common pattern is to use ",(0,l.kt)("a",{parentName:"p",href:"#value"},"EStyleSheet.value()")," inside the function to get access to global variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"EStyleSheet.build({\n    $prmaryColor: 'green',\n});\n\nconst styles = EStyleSheet.create({\n    button: {\n        backgroundColor: () => Color(EStyleSheet.value('$prmaryColor')).darken(0.1).hexString(),\n    },\n});\n")),(0,l.kt)("h2",{id:"caching"},"Caching"),(0,l.kt)("p",null,"If you use dynamic styles depending on runtime prop or you are making reusable component with dynamic styling\nyou may need stylesheet creation in every ",(0,l.kt)("inlineCode",{parentName:"p"},"render()")," call. Let's take example from ",(0,l.kt)("a",{parentName:"p",href:"#scaling"},"scaling")," section:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"class Button extends React.Component {\n    static propTypes = {\n        scale: React.PropTypes.number,\n    };\n    render() {\n        let style = getStyle(this.props.scale);\n        return <View style={style.button}></View>;\n    }\n}\n\nlet getStyle = function (scale = 1) {\n    return EStyleSheet.create({\n        $scale: scale,\n        button: {\n            width: 100,\n            height: 20,\n            marginLeft: 10,\n        },\n    });\n};\n")),(0,l.kt)("p",null,"To avoid creating styles on every render you can use ",(0,l.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/lodash.memoize"},"lodash.memoize"),":\nstore result for particular parameters and returns it from cache when called with the same parameters.\nUpdated example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"import memoize from 'lodash.memoize';\n\nlet getStyle = memoize(function (scale = 1) {\n    return EStyleSheet.create({\n        $scale: scale,\n        button: {\n            width: 100,\n            height: 20,\n            marginLeft: 10,\n        },\n    });\n});\n")),(0,l.kt)("p",null,"Now if you call ",(0,l.kt)("inlineCode",{parentName:"p"},"getStyle(1.5)")," 3 times actually style will be created on the first call\nand two other calls will get it from cache."),(0,l.kt)("h2",{id:"outline-for-debug"},"Outline for debug"),(0,l.kt)("p",null,"It is possible to outline all components that are using EStyleSheet. For that set global ",(0,l.kt)("inlineCode",{parentName:"p"},"$outline")," variable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"EStyleSheet.build({ $outline: 1 });\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"Note that components without styles will not be outlined,\nbecause RN ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/facebook/react-native/issues/1768"},"does not support")," default component styling yet.")),(0,l.kt)("p",null,"To outline particular component set local ",(0,l.kt)("inlineCode",{parentName:"p"},"$outline")," variable:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-jsx"},"const styles = EStyleSheet.create({\n  $outline: 1,\n  column: {\n    width: '80%',\n    flexDirection: 'row'\n  },\n  ...\n});\n")),(0,l.kt)("h2",{id:"hot-module-reload"},"Hot module reload"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://facebook.github.io/react-native/blog/2016/03/24/introducing-hot-reloading.html"},"Hot module reload (HMR)"),"\nallows you to change code and see live updates without loosing app state. It is very handy for tuning styles.\nEStyleSheet supports HMR with the following options:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"When you change style of component - the component is updated by HMR automatically without any effort from your side.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},"When you change global variable or theme - you should use ",(0,l.kt)("a",{parentName:"p",href:"https://facebook.github.io/react-native/releases/next/#hmr-api"},"HMR API"),"\nto force style re-calculation:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// app.js\nEStyleSheet.build({\n$fontColor: 'black'\n});\n    ...\n\n    module.hot.accept(() => {\n      EStyleSheet.clearCache();\n      EStyleSheet.build(); // force style re-calculation\n    });\n    ```\nSee full example of HMR [here](examples/hmr).\n\n")))))}d.isMDXComponent=!0}}]);